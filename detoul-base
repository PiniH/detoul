#!/bin/bash

exit_code="0"
first_command="1"

quit() {
  exit "$exit_code"
}

fail() {
  exit_code="1"
  quit
}

# does nothing if $1 isn't a detoul spec name
make-detoul-dependency() {
  exit_code_file="$DETOUL_TMP/intexitcode"
  echo "1" >"$exit_code_file"
  prepare-rerere-cache
  ((
    export DETOUL_COLOR_ALWAYS="1"
    (detoul cat "$1" >/dev/null 2>&1 || (echo "0" >"$exit_code_file" && exit 1)) &&
      echo -e "Making spec '\e[92m$1\e[0m...'" &&
      detoul make "$1" &&
      echo "0" >"$exit_code_file"
  ) 2>&1 1>&3 | sed -e 's/^/> /g') 3>&1 | sed -e '1!s/^\([^>]\)/> \1/g'
  exit_code="$(cat "$exit_code_file")"
  rm "$exit_code_file"
  exit "$exit_code"
}

autocomplete() {
  branch_name="$(git branch -a | sed -e 's/remotes\/[[:alnum:]]\+\///g' | cut -c3- | grep "^$1" | head -n 1)"
  if [ "$branch_name" == "" ]; then
    echo "$1"
  else
    echo "$branch_name"
  fi
}

checkout() {
  if [ "$first_command" == "1" ]; then
    color="\e[0m"
    first_command=0
  else
    color="\e[91m"
  fi
  echo -e "${color}Checking out\e[0m '\e[92m$branch\e[0m'..."
  if ( (git branch ; git tag) | grep -q "\b${branch}$" ); then
    checkout_branch="$branch"
  else
    checkout_branch="-b $branch $(git branch -a | grep "/${branch}$" | cut -d'/' -f2-3)"
  fi
  (
    git checkout $checkout_branch &&
      git branch -f "$DETOUL_BRANCH" &&
      git checkout "$DETOUL_BRANCH"
  ) >/dev/null 2>&1 || fail
  base_branch="$branch"
}

prepare-rerere-cache() {
  hash_seed="$(
    echo "$DETOUL_BRANCH"
    echo "$branch"
  )"
  cache_name=".rr-cache-$(echo "$hash_seed" | git hash-object --stdin)"
  cd "$GIT_WD"
  (
    git checkout detoul-spec &&
      rm -fr .git/rr-cache &&
      (rmdir "$cache_name" || [ 1 -eq 1 ]) &&
      (cp -R "$cache_name" .git/rr-cache || cp -R "$DETOUL_TMP/orig-rr-cache" .git/rr-cache)
  ) >/dev/null 2>&1
}

save-rerere-cache() {
  hash_seed="$(
    echo "$DETOUL_BRANCH"
    echo "$branch"
  )"
  cache_name=".rr-cache-$(echo "$hash_seed" | git hash-object --stdin)"
  cd "$GIT_WD"
  (
    git checkout detoul-spec &&
      rm -fr "$cache_name" &&
      mv .git/rr-cache "$cache_name" &&
      git add "$cache_name" &&
      git commit -m "recorded resolution in '$DETOUL_BRANCH': '$branch'"
  ) >/dev/null 2>&1
  git checkout "$DETOUL_BRANCH" >/dev/null 2>&1
}

take() {
  if [ "$base_branch" == "" ]; then
    checkout
  else
    if [ "$1" == "" ]; then
      echo -e "Taking '\e[92m$branch\e[0m'..."
    else
      echo -e "Taking '\e[92m$branch\e[0m' (\e[96m$1\e[0m)..."
    fi
    source_branch="$(git show-ref "$branch" | cut -d' ' -f1 | head -n 1)"
    prepare-rerere-cache
    (
      git checkout "$branch" &&
        git checkout "$DETOUL_BRANCH" &&
        (git rebase --onto "$DETOUL_BRANCH" "$base_branch" "$source_branch" || git rebase --continue) &&
        git checkout "$DETOUL_BRANCH" &&
        git reset --hard HEAD@{1}
    ) >/dev/null 2>&1 || fail
    save-rerere-cache
    
    if [ "${1/squash}" != "$1" ]; then
      message="$2"
      if [ "$message" == "" ]; then
        message="$branch"
      fi
      (
        git reset --soft "$DETOUL_BRANCH@{1}" &&
          git commit -m "$message"
      ) >/dev/null 2>&1 || fail
    fi
    
    if [ "${1/rebase}" == "$1" ]; then
      (
        bash -c "git filter-branch --parent-filter 'cat; echo \"-p $source_branch\"' -f HEAD~..HEAD"
      ) >/dev/null 2>&1 || fail
    fi
  fi
}

pick() {
  if [ "$base_branch" == "" ]; then
    branch="${command[1]}"
    checkout
  else
    echo -e "Picking '\e[92m${command[1]}\e[0m'..."
    (
      git cherry-pick "${command[1]}"
    ) >/dev/null 2>&1 || fail
  fi
}

base_branch=""

while read -r line; do
  if [ "$line" == "" ]; then
    continue
  fi
  command=($line)
  branch="$(autocomplete "${command[1]//\*/.*}")"
  (make-detoul-dependency "$branch") || fail
  case "${command[0]}" in
    checkout)
      checkout
      ;;
    rebase)
      take rebase
      ;;
    rebase-squash)
      take rebase-squash "$(echo "$line" | sed -e 's/^rebase-squash\s\+[[:graph:]]\+\s*//')"
      ;;
    take)
      take
      ;;
    take-squash)
      take squash "$(echo "$line" | sed -e 's/^take-squash\s\+[[:graph:]]\+\s*//')"
      ;;
    pick)
      pick
      ;;
    exec)
      echo -e "\e[91mExecuting\e[0m '\e[92m${line/exec /}\e[0m'..."
      cd "$GIT_WD"
      bash -c "${line/exec /}" || fail
      ;;
  esac
done

quit
